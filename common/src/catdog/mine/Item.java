package catdog.mine;

import java.util.Collection;

import com.badlogic.gdx.graphics.Texture;

public class Item implements Comparable<Item>
{
	public interface Interaction
	{
		public void interact(Collection<Life> mob, int blockX, int blockY);
	}

	private Texture iconTex;
	
	// 아이템 프로퍼티
	
	private int itemID;
	private String name;
	private String icon;
	private Interaction interact;
	private int interactDist;
	
	/**
	 * (블록 상태에서) 파괴에 걸리는 시간
	 */
	private float destroytime;
	
	/**
	 * 맵 생성시 자동으로 생성되는지
	 */
	private boolean autogenerated;
	
	/**
	 * 해당 블럭(아이템)이 제일 많이 나오는 층
	 */
	private int mostfoundlevel;
	/**
	 * 제일 많이 나오는 층에서 확률값
	 */
	private int mostfoundweight;
	/**
	 * 제일 많이 나오는 층에서 벗어날 때마다 감소하는 확률값
	 */
	private int foundweightdecrease;
	
	public int getItemID()
	{
		return itemID;
	}

	public String getName()
	{
		return name;
	}

	public String getIcon()
	{
		return icon;
	}

	public Texture getIconTex()
	{
		return iconTex;
	}

	public void setIconTex(Texture iconTex)
	{
		this.iconTex = iconTex;
	}
	
	public Interaction getInteract()
	{ 
		return interact;
	}
	
	public int getInteractDist()
	{
		return interactDist;
	}

	public float getDestroytime() {
		return destroytime;
	}
	
	public boolean getAutoGenerated() {
		return autogenerated;
	}
	
	public int getMostfoundlevel() {
		return mostfoundlevel;
	}

	public int getMostfoundweight() {
		return mostfoundweight;
	}

	public int getFoundweightdecrease() {
		return foundweightdecrease;
	}

	public Item(int itemID, String name, String icon,
			Interaction interact, int interactDist,
			float destroytime,
			boolean autogenerated, 
			int mostfoundlevel, int mostfoundweight, int foundweightdecrease)
	{
		this.itemID = itemID;
		this.name = name;
		this.icon = icon;
		
		this.interact = interact;
		this.interactDist = interactDist;
		
		this.autogenerated = autogenerated;
		
		this.destroytime = destroytime;
		
		this.mostfoundlevel = mostfoundlevel;
		this.mostfoundweight = mostfoundweight;
		this.foundweightdecrease = foundweightdecrease;
	}

	@Override
	public int compareTo(Item target)
	{
		return itemID - target.itemID;
	}

	@Override
	public boolean equals(Object target)
	{
		return (target instanceof Item && ((Item)target).itemID == itemID);
	}
	
	/**
	 * 현재 층에서 나올 확률값 구하기
	 * @param y 층
	 * @return 확률값
	 */
	public int getFoundWeightForLevel(int y) {
		return Math.max(0, getMostfoundweight() - 
				Math.abs(getMostfoundlevel() - y) * getFoundweightdecrease());
	}
}
